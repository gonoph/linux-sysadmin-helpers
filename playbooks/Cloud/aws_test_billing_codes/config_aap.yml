- name: Create Credentials, Inventory, sources, project, and template
  hosts: all
  connection: local
  become: false
  gather_facts: false
  vars_files:
    - vault.yml

  tasks:
  - name: Add AWS credential
    ansible.controller.credential:
      name: Test AWS Credential
      description: Credentials for AWS Testing
      organization: "{{ AAP_ORG }}"
      credential_type: Amazon Web Services
      state: present
      update_secrets: false
      inputs:
        username: "{{ EC2_USERNAME }}"
        password: "{{ EC2_SECRET_KEY }}"
    
  - name: Create AWS Inventory
    ansible.controller.inventory:
      name: "Test AWS Inventory"
      description: "Test AWS Inventory"
      organization: "{{ AAP_ORG }}"
      state: present
      variables:
        ansible_user: ec2-user

  - name: Attach AWS Source
    ansible.controller.inventory_source:
      name: "AWS Test Source"
      description: "Source for inventory"
      inventory: "Test AWS Inventory"
      credential: "Test AWS Credential"
      overwrite: true
      update_on_launch: true
      organization: "{{ AAP_ORG }}"
      source: ec2
      source_vars:
        compose:
          ansible_host: public_ip_address
        filters:
          instance-state-name:
          - running
        groups:
          ec2: false
        hostnames:
        - tag:Name
        plugin: amazon.aws.aws_ec2
        regions: []
        use_contrib_script_compatible_sanitization: false

  - name: Create Project
    ansible.controller.project:
      name: linux-sysadmin-helpers playbooks
      organization: "{{ AAP_ORG }}"
      scm_type: git
      scm_url: https://github.com/gonoph/linux-sysadmin-helpers.git

  - name: Create Template
    ansible.controller.job_template:
      name: AWS-Test-Billing-Codes
      job_type: run
      inventory: "Test AWS Inventory"
      organization: "{{ AAP_ORG }}"
      credentials:
        - "Test AWS Credential"
      project: "linux-sysadmin-helpers playbooks"
      playbook: "playbooks/Cloud/aws_test_billing_codes/aws_test_billing_codes.yml"

  - name: Run the newly created Template
    ansible.controller.job_launch:
      job_template: AWS-Test-Billing-Codes
      wait: true
    register: job

  - name: Get job output
    ansible.controller.job_list:
      query:
        id: "{{ job.id }}"
    register: jobs

  - name: extract tower credentials
    set_fact:
      url: "{{ lookup('ansible.builtin.ini', 'host', section='general', file='tower_cli.cfg') }}{{ jobs.results[0].related.stdout }}"
      headers: "{{ {'Authorization': 'Bearer ' + ot} if ot else {} }}"
      oauth_token: "{{ ot }}"
      username: "{{ u if not ot else omit }}"
      password: "{{ p if not ot else omit }}"
      verify_ssl: "{{ ssl | bool if ssl else True }}"
    vars:
      ot: "{{ lookup('ansible.builtin.ini', 'oauth_token', section='general', file='tower_cli.cfg', allow_no_value=True) }}"
      u: "{{ lookup('ansible.builtin.ini', 'username', section='general', file='tower_cli.cfg', allow_no_value=True) }}"
      p: "{{ lookup('ansible.builtin.ini', 'password', section='general', file='tower_cli.cfg', allow_no_value=True) }}"
      ssl: "{{ lookup('ansible.builtin.ini', 'verify_ssl', section='general', file='tower_cli.cfg', allow_no_value=True) }}"

  - name: get stdout
    uri:
      url: "{{ url }}?format=txt_download"
      method: GET
      return_content: true
      headers: "{{ headers }}"
      user: "{{ username | default(omit) }}"
      password: "{{ password | default(omit) }}"
      validate_certs: "{{ verify_ssl }}"
    register: job_output

  - name: job output
    debug:
      msg: "{{ job_output.content | split('\n') }}"
